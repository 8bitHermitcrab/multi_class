# -*- coding: utf-8 -*-
"""데이터_시각화_0504_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-eY1t9Rw_96YfK-vh6Un8VMq72iiastL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

path = '/content/drive/MyDrive/[멀캠 파이널 프로젝트] 신용카드 연체 예측/data/'

train = pd.read_csv(path + 'train.csv')
test = pd.read_csv(path + 'test.csv')
df = train
df.head(2)

feats = ['DAYS_BIRTH', 'begin_month', 'DAYS_EMPLOYED']
for feat in feats:
    train[feat]=np.abs(train[feat])
    test[feat]=np.abs(test[feat])

sns.pairplot(train)
plt.show()

sns.pairplot(train, kind='reg', plot_kws={'line_kws':{'color' : 'red'}, 'scatter_kws' : {'alpha' : 0.1}})
plt.show()

from statsmodels.formula.api import ols

# model = ols('y ~ sat + weight + width', df)

#index+gender+car+reality+child_num+income_total+income_type+edu_type+family_type+house_type+DAYS_BIRTH+DAYS_EMPLOYED+FLAG_MOBIL+work_phone+phone+email+occyp_type+family_size+begin_month+credit
# model = ols('child_num ~ family_size', train)
model = ols('income_total ~ index+gender+car+reality+child_num+income_total+income_type+edu_type+family_type+house_type+DAYS_BIRTH+DAYS_EMPLOYED+FLAG_MOBIL+work_phone+phone+email+occyp_type+family_size+begin_month+credit', train)
# model = ols('income_total ~ family_type', train)
# occyp_type[T.IT staff]

res = model.fit()

res.summary()

from statsmodels.stats.outliers_influence import variance_inflation_factor

# 모형식에서 독립변수는 절편, sat, weight, width 순이다.
model.exog_names

# X의 1번째 독립변수 sat의 VIF를 계산한다.
variance_inflation_factor(model.exog, 1)

# X의 2번째 독립변수 weight의 VIF를 계산한다.
# variance_inflation_factor(model.exog, 2)

pd.DataFrame({'컬럼': column, 'VIF': variance_inflation_factor(model.exog, i)} 
             for i, column in enumerate(model.exog_names)
             if column != 'Intercept')  # 절편의 VIF는 구하지 않는다.

"""---
# 파생변수로 변형
"""

for df in [train,test]:
    # before_EMPLOYED: 고용되기 전까지의 일수
    df['prev_EMPLOYED'] = df['DAYS_BIRTH'] - df['DAYS_EMPLOYED']
    df['income_t_prevEMP'] = df['income_total'] / df['prev_EMPLOYED']
    df['prev_EMPLOYED_M'] = np.floor(df['prev_EMPLOYED'] / 30) - ((np.floor(df['prev_EMPLOYED'] / 30) / 12).astype(int) * 12)
    df['prev_EMPLOYED_W'] = np.floor(df['prev_EMPLOYED'] / 7) - ((np.floor(df['prev_EMPLOYED'] / 7) / 4).astype(int) * 4)
    
    #DAYS_BIRTH 파생변수- Age(나이), 태어난 월, 태어난 주(출생연도의 n주차)
    # df['Age'] = df['DAYS_BIRTH'] // 365
    df['DAYS_BIRTH_M'] = np.floor(df['DAYS_BIRTH'] / 30) - ((np.floor(df['DAYS_BIRTH'] / 30) / 12).astype(int) * 12)
    df['DAYS_BIRTH_W'] = np.floor(df['DAYS_BIRTH'] / 7) - ((np.floor(df['DAYS_BIRTH'] / 7) / 4).astype(int) * 4)

    
    #DAYS_EMPLOYED_m 파생변수- EMPLOYED(근속연수), DAYS_EMPLOYED_m(고용된 달) ,DAYS_EMPLOYED_w(고용된 주(고용연도의 n주차))  
    df['EMPLOYED_Y'] = df['DAYS_EMPLOYED'] // 365
    df['DAYS_EMPLOYED_M'] = np.floor(df['DAYS_EMPLOYED'] / 30) - ((np.floor(df['DAYS_EMPLOYED'] / 30) / 12).astype(int) * 12)
    df['DAYS_EMPLOYED_W'] = np.floor(df['DAYS_EMPLOYED'] / 7) - ((np.floor(df['DAYS_EMPLOYED'] / 7) / 4).astype(int) * 4)

    #ability: 소득/(살아온 일수+ 근무일수)
    # df['ability'] = df['income_total'] / (df['DAYS_BIRTH'] + df['DAYS_EMPLOYED'])
    
    #income_mean: 소득/ 가족 수
    df['income_mean'] = df['income_total'] / df['family_size']
    
    #ID 생성: 각 컬럼의 값들을 더해서 고유한 사람을 파악(*한 사람이 여러 개 카드를 만들 가능성을 고려해 begin_month는 제외함)
    df['ID'] = \
    df['child_num'].astype(str) + '_' + df['income_total'].astype(str) + '_' +\
    df['DAYS_BIRTH'].astype(str) + '_' + df['DAYS_EMPLOYED'].astype(str) + '_' +\
    df['work_phone'].astype(str) + '_' + df['phone'].astype(str) + '_' +\
    df['email'].astype(str) + '_' + df['family_size'].astype(str) + '_' +\
    df['gender'].astype(str) + '_' + df['car'].astype(str) + '_' +\
    df['reality'].astype(str) + '_' + df['income_type'].astype(str) + '_' +\
    df['edu_type'].astype(str) + '_' + df['family_type'].astype(str) + '_' +\
    df['house_type'].astype(str) + '_' + df['occyp_type'].astype(str)

    # work_income : 소득 / 근무일수
    df['work_income'] = df['income_total'] / df['DAYS_EMPLOYED']

df

"""## 관계 그래프"""

corr_df = df[['income_total', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'begin_month', 
                'prev_EMPLOYED', 'income_t_prevEMP', 'prev_EMPLOYED_M', 'prev_EMPLOYED_W', 'DAYS_BIRTH_M', 'DAYS_BIRTH_W',
       'EMPLOYED_Y', 'DAYS_EMPLOYED_M', 'DAYS_EMPLOYED_W', 'income_mean', 'work_income']]

sns.pairplot(corr_df)
plt.show()

plt.figure(figsize=(15,15))
sns.heatmap(data = train.select_dtypes(incloude=['int64', 'float64']), annot=True, fmt = '.2f', linewidths=.5, cmap='Blues')

sns.pairplot(corr_df, kind='reg', plot_kws={'line_kws':{'color' : 'red'}, 'scatter_kws' : {'alpha' : 0.1}})
plt.show()

corr_df = df[['income_total', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'begin_month', 
                'prev_EMPLOYED', 'income_t_prevEMP', 'prev_EMPLOYED_M', 'prev_EMPLOYED_W', 'DAYS_BIRTH_M', 'DAYS_BIRTH_W',
       'EMPLOYED_Y', 'DAYS_EMPLOYED_M', 'DAYS_EMPLOYED_W', 'income_mean', 'work_income']]

"""## 포인트플롯"""

# corr_df = df[['income_total', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'begin_month', 
                # 'prev_EMPLOYED', 'income_t_prevEMP', 'prev_EMPLOYED_M', 'prev_EMPLOYED_W', 'DAYS_BIRTH_M', 'DAYS_BIRTH_W',
      #  'EMPLOYED_Y', 'DAYS_EMPLOYED_M', 'DAYS_EMPLOYED_W', 'income_mean', 'work_income']]
plt.scatter(x='income_mean', y='income_total', data=corr_df)

"""## 막대그래프"""

plt.figure(figsize=(15,15))
sns.barplot(x='income_mean', y='income_total', data=corr_df)

